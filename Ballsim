#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 30 02:46:12 2021

@author: noah01px2019


 
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from scipy.optimize import curve_fit

data_file = "/Users/noah01px2019/Downloads/Ball_data.txt"
data_set = np.loadtxt(data_file, delimiter=',', dtype=str)
time = np.zeros(len(data_set))  #Initializing time array
position = np.zeros(len(data_set))  #Initializing position array
g = 9.81    #Gravitational Acceleration
ball_density = 700  #Initializing variables for ball
ball_mass = 0.1
ball_volume = ball_mass/ball_density
ball_radius = (ball_volume*3/(4*np.pi))**(1/3)


for i in range(len(data_set)):  #Filling in time and position array according to our data
    time[i] = data_set[i].split()[0]
    position[i] = data_set[i].split()[1]



A1 = time[0:10] #First 1 second = parabolic behavior where gravity/buoyancy >> drag 
A1 = A1.reshape((A1.size, 1))
Y1 = (position[0:10])**0.5
Y1 = Y1.reshape((Y1.size, 1))
p_g = float(np.linalg.lstsq(A1, Y1, rcond=None)[0]) #Fitting slope to square root of position
fluid_density_guess = -(((p_g)**2)*2*ball_mass)/(ball_volume*g)+ball_density     #Deriving fluid density from the slope

b_guess = 0.5 * fluid_density_guess * np.pi * (ball_radius)**2 * 0.2 #B Can be derived from fluid density

A2 = time[140:150] #Doing the same for constant a
A2 = A2.reshape((A2.size, 1))
Y2 = (position[140:150])
Y2 = Y2.reshape((Y2.size, 1))
a_g = float(np.linalg.lstsq(A2, Y2, rcond=None)[0])
a_guess = ((ball_density - fluid_density_guess)*ball_volume*g-(b_guess*(a_g)**2))/(a_g)


p0v0 = [0,0] #Initial conditions for our ball


def BallEquation(y,t,a,fluid_density):   #ODE for our ball
    b = 0.5 * fluid_density * np.pi * (ball_radius)**2 * 0.2
    gravity_buoyancy_force = (ball_density - fluid_density)*ball_volume*g
    pos, v = y   
    dydt = [v, (gravity_buoyancy_force - (a*v + b*(v**2)))/ball_mass] # define a list dydt that has the eqns for the first and second derivative
    return dydt

def BallTrajectory(t,a,fluid_density):
    position_velocity = odeint(BallEquation, p0v0, time,args=(a, fluid_density))[:,0]
    return position_velocity

a_fit, p_fit = curve_fit(BallTrajectory, time, position, p0=(a_guess, fluid_density_guess))[0]    #Curve fitting to find fluid density and a

viscosity = a_fit/(6*np.pi*ball_radius)

plt.plot(time,position, 'x', label = 'Original data')
plt.xlabel('Time (Seconds)') 
plt.ylabel('Displacement (Meters)')
plt.title('Displacement vs. Time of falling ball')
plt.figure()
plt.plot(time, BallTrajectory(time, a_fit, p_fit), label='Curve fit')
plt.legend(loc=4)
plt.xlabel('Time (Seconds)') 
plt.ylabel('Displacement (Meters)')
plt.title('Curve fit of Displacement vs. Time of falling ball')



print('Estimated Fluid Density = ' + str(fluid_density_guess)) #Printing values and initial estimates for constants
print('Estimated a = ' + str(a_guess))
print('Fitted Fluid Density = ' + str(p_fit))
print('Fitted a = ' + str(a_fit))



#Polynomial Fit
A = np.vstack([np.ones(len(time)), time, time**2, time**3, time**4, time**5]).T #Initializes matrix

a, b, c, d, e, f = np.linalg.lstsq(A, position, rcond=None)[0] #gives the least squares solution to a linear matrix eqn.

plt.figure()
plt.plot(time, position, 'x', label='Original data') #Plotting Polynomial Fit
x2 = np.arange(-1, 17, 1)
plt.plot(x2, a+b*x2+c*x2**2+d*x2**3+e*x2**4+f*x2**5, 'r', label='Polynomial Fitted line')
plt.legend(loc=4)
plt.xlabel('Time (Seconds)') 
plt.ylabel('Displacement (Meters)')
plt.title('5th Degree Polynomial fit of Displacement vs. Time of falling ball')
plt.show()

